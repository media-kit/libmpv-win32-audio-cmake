From 3cb56f22c01e29cf9170ed33a877c08d4c9cd61c Mon Sep 17 00:00:00 2001
From: shinchiro <shinchiro@users.noreply.github.com>
Date: Sat, 22 Jul 2023 10:14:36 +0800
Subject: [PATCH] loader: cross-compile & static linking hacks

---
 loader/CMakeLists.txt       | 15 +++++++++------
 loader/loader.h             |  2 ++
 loader/loader.rc.in         |  4 ++++
 loader/loader_windows.c     |  4 ++++
 loader/vk_loader_platform.h |  3 ++-
 5 files changed, 21 insertions(+), 7 deletions(-)

diff --git a/loader/CMakeLists.txt b/loader/CMakeLists.txt
index e1b0d71..0847bc2 100644
--- a/loader/CMakeLists.txt
+++ b/loader/CMakeLists.txt
@@ -21,7 +21,7 @@ add_library(loader_specific_options INTERFACE)
 target_link_libraries(loader_specific_options INTERFACE loader_common_options Vulkan::Headers)
 target_include_directories(loader_specific_options INTERFACE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/generated ${CMAKE_CURRENT_BINARY_DIR})
 
-if(WIN32)
+if(WIN32 AND NOT MINGW)
 
     if(ENABLE_WIN10_ONECORE)
         # Note: When linking your app or driver to OneCore.lib, be sure to remove any links to non-umbrella libs (such as
@@ -115,7 +115,7 @@ set(ASM_FAILURE_MSG "The build will fall back on building with C code\n")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG}Note that this may be unsafe, as the C code requires tail-call optimizations to remove")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG} the stack frame for certain calls. If the compiler does not do this, then unknown device")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG} extensions will suffer from a corrupted stack.")
-if(WIN32)
+if(MSVC)
     if(MINGW)
         find_program(JWASM_FOUND jwasm)
         if (JWASM_FOUND)
@@ -172,7 +172,7 @@ if(WIN32)
         set(USE_ASSEMBLY_FALLBACK ON)
         message(WARNING "Could not find working MASM assembler\n${ASM_FAILURE_MSG}")
     endif()
-elseif(UNIX) # i.e.: Linux & Apple
+elseif(UNIX OR MINGW) # i.e.: Linux & Apple
     option(USE_GAS "Use GAS" ON)
     if(USE_GAS)
         enable_language(ASM)
@@ -257,7 +257,7 @@ if(USE_ASSEMBLY_FALLBACK)
     endif()
 endif()
 
-if(WIN32)
+if(MSVC)
     add_library(loader-opt STATIC ${OPT_LOADER_SRCS})
     target_link_libraries(loader-opt PUBLIC loader_specific_options)
     add_dependencies(loader-opt loader_asm_gen_files)
@@ -307,7 +307,7 @@ if(WIN32)
     add_dependencies(vulkan loader_asm_gen_files)
 
 else()
-    if(APPLE AND BUILD_STATIC_LOADER)
+    if(BUILD_STATIC_LOADER)
         add_library(vulkan STATIC ${NORMAL_LOADER_SRCS} ${OPT_LOADER_SRCS})
         target_compile_definitions(vulkan PRIVATE BUILD_STATIC_LOADER)
     else()
@@ -361,6 +361,7 @@ else()
         # framework version does not have to be "A", this part of the Apple toolchain expects it.
         # https://forums.developer.apple.com/thread/65963
 
+        if (NOT BUILD_STATIC_LOADER)
         set_target_properties(vulkan-framework PROPERTIES
             OUTPUT_NAME vulkan
             FRAMEWORK TRUE
@@ -374,6 +375,7 @@ else()
             PUBLIC_HEADER DESTINATION vulkan
             FRAMEWORK DESTINATION loader
         )
+        endif()
     endif()
 endif()
 
@@ -407,7 +409,7 @@ if(PKG_CONFIG_FOUND)
         list(REMOVE_DUPLICATES PRIVATE_LIBS)
         set(PRIVATE_LIBS "Libs.private: ${PRIVATE_LIBS}")
     endif()
-    if(WIN32)
+    if(WIN32 AND NOT BUILD_STATIC_LOADER)
         if(MINGW)
             set(VULKAN_LIB_SUFFIX "-1.dll")
         else()
@@ -431,6 +433,7 @@ if(PKG_CONFIG_FOUND)
         file(RELATIVE_PATH CMAKE_INSTALL_REL_INCLUDEDIR_PC ${CMAKE_INSTALL_PREFIX} ${CMAKE_INSTALL_FULL_INCLUDEDIR})
     endif()
     set(VULKAN_LOADER_PKG_CONFIG_NAME "Vulkan-Loader")
+    set(PRIVATE_LIBS "Libs.private: -lshlwapi -lcfgmgr32")
     configure_file("vulkan.pc.in" "vulkan.pc" @ONLY)
     install(FILES "${CMAKE_CURRENT_BINARY_DIR}/vulkan.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 endif()
diff --git a/loader/loader.h b/loader/loader.h
index 158e8ad..b7fcde8 100644
--- a/loader/loader.h
+++ b/loader/loader.h
@@ -33,7 +33,9 @@
 #include "cJSON.h"
 
 // Declare the once_init variable
+#if defined(_WIN32) && !defined(LOADER_DYNAMIC_LIB)
 LOADER_PLATFORM_THREAD_ONCE_EXTERN_DEFINITION(once_init)
+#endif
 
 static inline VkPhysicalDevice loader_unwrap_physical_device(VkPhysicalDevice physicalDevice) {
     struct loader_physical_device_tramp *phys_dev = (struct loader_physical_device_tramp *)physicalDevice;
diff --git a/loader/loader.rc.in b/loader/loader.rc.in
index 0dc4227..e7fcea0 100644
--- a/loader/loader.rc.in
+++ b/loader/loader.rc.in
@@ -19,7 +19,11 @@
 // Author: Charles Giessen <charles@lunarg.com>
 //
 
+#ifdef __MINGW64__
+#include <winresrc.h>
+#else // MSVC
 #include "winres.h"
+#endif
 
 // All set through CMake
 #define VER_FILE_VERSION ${LOADER_VER_FILE_VERSION}
diff --git a/loader/loader_windows.c b/loader/loader_windows.c
index f9f2dda..eb03441 100644
--- a/loader/loader_windows.c
+++ b/loader/loader_windows.c
@@ -47,6 +47,8 @@
 #include <strsafe.h>
 #if defined(__MINGW32__)
 #undef strcpy  // fix error with redfined strcpy when building with MinGW-w64
+#define CM_GETIDLIST_FILTER_PRESENT            (0x00000100)
+#define CM_GETIDLIST_FILTER_CLASS              (0x00000200)
 #endif
 #include <dxgi1_6.h>
 #include "adapters.h"
@@ -95,6 +97,7 @@ void windows_initialization(void) {
 #endif
 }
 
+#if defined(LOADER_DYNAMIC_LIB)
 BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, LPVOID reserved) {
     (void)hinst;
     switch (reason) {
@@ -112,6 +115,7 @@ BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, LPVOID reserved) {
     }
     return TRUE;
 }
+#endif
 
 bool windows_add_json_entry(const struct loader_instance *inst,
                             char **reg_data,    // list of JSON files
diff --git a/loader/vk_loader_platform.h b/loader/vk_loader_platform.h
index 1fbdf97..18284aa 100644
--- a/loader/vk_loader_platform.h
+++ b/loader/vk_loader_platform.h
@@ -67,6 +67,7 @@
 #include <io.h>
 #include <shlwapi.h>
 #include <direct.h>
+#include <pthread.h> // for mingw
 #endif  // defined(_WIN32)
 
 #include "stack_allocation.h"
@@ -221,7 +222,7 @@ static inline bool loader_platform_is_path(const char *path) { return strchr(pat
 // resources allocated by anything allocated by once init. This isn't a problem for static libraries, but it is for dynamic
 // ones. When building a DLL, we use DllMain() instead to allow properly cleaning up resources.
 
-#if defined(__APPLE__) && defined(BUILD_STATIC_LOADER)
+#if defined(BUILD_STATIC_LOADER)
 static inline void loader_platform_thread_once_fn(pthread_once_t *ctl, void (*func)(void)) {
     assert(func != NULL);
     assert(ctl != NULL);
-- 
2.41.0

